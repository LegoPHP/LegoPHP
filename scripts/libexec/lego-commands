#!/usr/bin/env bash
# Usage: lego commands
# Summary: List all lego commands
# Help: This command is mostly used for autocompletion in various shells, and for `lego help`.
# Also, this command helps find commands that are named the same as potentially builtin shell commands (which, cd, etc)

set -e

if [ "$1" = "--sh" ]; then
  sh=1
  shift
elif [ "$1" = "--no-sh" ]; then
  nosh=1
  shift
fi

shopt -s nullglob

if grep -i "^# provide lego completions" "$_SUB_COMMAND_ROOT/lego-$_SUB_COMMAND_FILE" >/dev/null; then
  completions=`exec "$_SUB_COMMAND_ROOT/lego-$_SUB_COMMAND_FILE" --complete "$@"`
  if [ "$completions" ]; then
    echo $completions
  fi
  exit
fi

{ for path in ${PATH//:/$'\n'}; do
    for command in "${path}/lego-"*; do
      if [ ! "$command" == "$_SUB_COMMAND_ROOT/lego-$_SUB_COMMAND_FILE" ] || [ "$_SUB_COMMAND_FILE" == "commands" ]; then
        if [ -d "$_SUB_COMMAND_ROOT" ] && [ "$_SUB_COMMAND_ROOT" == "$path" ]; then
          do_commands="true"
        elif [ ! -d "$_SUB_COMMAND_ROOT" ] || [ "$_SUB_COMMAND_ROOT" == "$_LEGO_ROOT/libexec" ]; then
          do_commands="true"
        else
          do_commands="false"
        fi
      elif [ "$command" == "commands" ] && [ "$command" == "$_SUB_COMMAND_FILE" ]; then
        do_commands="true"
      else
        do_commands="false"
      fi
       if [ "$do_commands" == "true" ]; then
        command="${command##*lego-}"
        if [ -n "$sh" ]; then
          if [ ${command:0:3} = "sh-" ]; then
            echo ${command##sh-}
          fi
        elif [ -n "$nosh" ]; then
          if [ ${command:0:3} != "sh-" ]; then
            echo ${command##sh-}
          fi
        else
          echo ${command##sh-}
        fi
      fi
    done
  done
} | sort | uniq
